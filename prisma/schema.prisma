// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    workEntries   WorkEntry[]
    educationEntries EducationEntry[]
    phoneNumber   String?
    website       String?
    skills      String[]
    hobbies     String[]
    personal    PersonalEntry?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PersonalEntry {
    id      String @id @default(cuid())
    prompt  String
    result  String
    userId  String  @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkEntry {
    id      String @id @default(cuid())
    role    String?
    company String?
    start   DateTime? @db.Date
    end     DateTime? @db.Date
    prompt  String
    result  String?
    userId  String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EducationEntry {
    id      String @id @default(cuid())
    course    String?
    institute String?
    start   String?
    end     String?
    prompt  String
    result  String?
    userId  String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
